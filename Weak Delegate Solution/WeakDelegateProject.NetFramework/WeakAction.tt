<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace It3xl.WeakDelegateProject
{
	using System;


<# 
// The amount of the Action delegates in the .NET Framework.
var actionsCount =
	// Not templated Action.
	1
	// The templated Actions.
	+ 16;

for(var i = 0; i < actionsCount; i++)
{
	var typesList = GetTypes(i);
 #>
	/// <summary>
	/// Encapsulates a weak delegate of the <see cref="Action<#= typesList.Replace("<", "{").Replace(">", "}") #>"/>.
	/// </summary>
	public sealed class WeakAction<#= typesList #> : WeakDelegateBase
	{
		public WeakAction(){}
		public WeakAction(Action<#= typesList #> inputDelegate)
			: base(inputDelegate)
		{
		}

		public void Add(Action<#= typesList #> delegatesForAdding)
		{
			base.Add(delegatesForAdding);
		}

		public void Remove(Action<#= typesList #> delegatesForRemoving)
		{
			base.Add(delegatesForRemoving);
		}

		public void Invoke(<#= GetTypedParameters(i) #>)
		{
			ProcessInvoke(<#= GetParameters(i) #>);
		}

		//private void InvokeAsync(<#= GetTypedParameters(i) #>)
		//{
		//	ProcessInvokeAsync(<#= GetParameters(i) #>);
		//}
	}

<# } #>

}
<#+ 

private String GetTypes(Int32 amount){
	if(amount == 0)
	{
		return String.Empty;
	}

	var builder = new StringBuilder();
	builder.Append("<");

	var typeDelimiter = ", ";
	for (int i = 0; i < amount; i++)
	{
		var number = i + 1;
		builder.AppendFormat("T{0}{1}", number, typeDelimiter);
	}
	builder.Remove(builder.Length - typeDelimiter.Length, typeDelimiter.Length);

	builder.Append(">");

	return builder.ToString();
}

private String GetTypedParameters(Int32 amount){
	if(amount == 0)
	{
		return String.Empty;
	}

	var builder = new StringBuilder();
	var typeDelimiter = ", ";
	for (int i = 0; i < amount; i++)
	{
		var number = i + 1;
		builder.AppendFormat("T{0} t{0}{1}", number, typeDelimiter);
	}
	builder.Remove(builder.Length - typeDelimiter.Length, typeDelimiter.Length);

	return builder.ToString();
}

private String GetParameters(Int32 amount){
	if(amount == 0)
	{
		return "null";
	}

	var builder = new StringBuilder();
	builder.Append("new object[] { ");

	var typeDelimiter = ", ";
	for (int i = 0; i < amount; i++)
	{
		var number = i + 1;
		builder.AppendFormat("t{0}{1}", number, typeDelimiter);
	}
	builder.Remove(builder.Length - typeDelimiter.Length, typeDelimiter.Length);

	builder.Append(" }");

	return builder.ToString();
}

 #>

